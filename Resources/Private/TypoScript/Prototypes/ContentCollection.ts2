# This is a helper TypoScript object which is used to render all of the child elements
# of a current node.
prototype(TYPO3.Neos:ContentCollectionRenderer) < prototype(TYPO3.TypoScript:Collection) {
	# Set context removedContentShown to get removed nodes too.
	# Needed for publish function to be able to publish removed nodes.
	collection = ${q(node).context({'removedContentShown': true}).children()}
	# Render every item by its own TS object
	itemRenderer = TYPO3.Neos:ContentCase
	itemName = 'node'
	iterationName = 'iterator'
}

prototype(TYPO3.Neos:ContentCollection) < prototype(TYPO3.TypoScript:Tag) {
	attributes = TYPO3.TypoScript:Attributes
	attributes.class = 'neos-contentcollection'
	tagName = 'div'

	nodePath = 'to-be-set-by-user'

	# You may override this to get your content collection from a different place than the current node.
	# The Eel helper is used to provide a better error message if no content collection could be found.
	@override.contentCollectionNode = ${Neos.Node.nearestContentCollection(node, this.nodePath)}

	content = TYPO3.Neos:ContentCollectionRenderer {
		@override.node = ${contentCollectionNode}
	}

	# We have to define contentElementWrapping, because we do not inherit from TYPO3.Neos:Content
	@process.contentElementWrapping = TYPO3.Neos:ContentElementWrapping {
		node = ${contentCollectionNode}
	}

	@cache {
		mode = 'cached'

		entryIdentifier {
			collection = ${contentCollectionNode}
			domain = ${site.context.currentDomain}
		}

		entryTags {
			1 = ${'DescendantOf_' + contentCollectionNode.identifier}
			2 = ${'Node_' + contentCollectionNode.identifier}
		}

		maximumLifetime = ${q(contentCollectionNode).context({'invisibleContentShown': true}).children().cacheLifetime()}
	}
}

prototype(TYPO3.Neos:Content) {
	prototype(TYPO3.Neos:ContentCollection) {
		# Make ContentCollection inside content node types embedded by default.
		# Usually there's no need for a separate cache entry for container content elements, but depending on the use-case
		# the mode can safely be switched to 'cached'.
		@cache {
			mode = 'embed'
		}
	}
}
